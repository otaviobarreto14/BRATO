<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TopDown.TopAccess.BusinessRules</name>
    </assembly>
    <members>
        <member name="T:TopDown.TopAccess.BusinessRules.FuncaoRules">
            <summary>
            Regras de negócio para Funções.
            </summary>
        </member>
        <member name="M:TopDown.TopAccess.BusinessRules.FuncaoRules.#ctor">
            <summary>
            Construtor público padrão sem parâmetros.
            </summary>
        </member>
        <member name="M:TopDown.TopAccess.BusinessRules.FuncaoRules.#ctor(System.Boolean)">
            <summary>
            Permite criar a regra em um novo contexto de dados.
            </summary>
            <param name="useNewContext">Indica se deseja criar usando um novo contexto de dados.</param>
        </member>
        <member name="M:TopDown.TopAccess.BusinessRules.FuncaoRules.ObterFuncoesOrdenadas(System.Int32)">
            <summary>
            Obtém as funções ordenadas, conforme uma visualização em árvore.
            </summary>
            <param name="codModulo">Código do Módulo desejado.</param>
        </member>
        <member name="M:TopDown.TopAccess.BusinessRules.FuncaoRules.GetChildren(System.Nullable{System.Decimal},System.Nullable{System.Int32},System.Int32[],System.Nullable{TopDown.TopAccess.Entities.TipoFuncao})">
            <summary>
            Obtém os nós-filhos de uma função e quaisquer outros filhos cujo nó-pai esteja expandido.
            </summary>
            <param name="nodeId">Função escolhida.</param>
            <param name="codModulo">Código do Módulo.</param>
            <param name="expandedNodes">Nós expandidos.</param>
            <param name="tipoFuncao">Informa o tipo de funcao</param>
        </member>
        <member name="M:TopDown.TopAccess.BusinessRules.FuncaoRules.Validate(TopDown.TopAccess.Entities.FuncaoEntity)">
            <summary>
            Validação de negócio da função.
            </summary>
            <param name="entity">Função sendo validada.</param>
        </member>
        <member name="M:TopDown.TopAccess.BusinessRules.FuncaoRules.Subir(System.Int32)">
            <summary>
            Sobe a posição de um item de menu, caso este já não seja o primeiro item.
            </summary>
            <param name="idFuncao">Código da função desejada.</param>
            <param name="menuOnly">Informa se está manipulando apenas itens de menu</param>
        </member>
        <member name="M:TopDown.TopAccess.BusinessRules.FuncaoRules.Descer(System.Int32)">
            <summary>
            Desce a posição de um item de menu, caso este já não seja o último item.
            </summary>
            <param name="idFuncao">Código da função desejada.</param>
            <param name="menuOnly">Informa se está manipulando apenas itens de menu</param>
            <returns></returns>
        </member>
        <member name="M:TopDown.TopAccess.BusinessRules.FuncaoRules.GetChildren(TopDown.TopAccess.Entities.FuncaoEntity,TopDown.TopAccess.Entities.ModuloEntity)">
            <summary>
            Obtém os filhos de uma função de menu.
            </summary>
            <param name="funcaoPai">Código da Função Pai</param>
            <param name="modulo">Código do Módulo</param>
            <returns></returns>
        </member>
        <member name="M:TopDown.TopAccess.BusinessRules.FuncaoRules.DeleteById(System.Decimal)">
            <summary>
            Apaga uma função e reordena o restante das funções irmãs.
            </summary>
            <param name="id">Função sendo excluída.</param>
        </member>
        <member name="M:TopDown.TopAccess.BusinessRules.FuncaoRules.Create(TopDown.TopAccess.Entities.FuncaoEntity)">
            <summary>
            Inclui uma nova função no repositório de dados.
            </summary>
            <param name="entity">Nova função que será incluída.</param>
        </member>
        <member name="M:TopDown.TopAccess.BusinessRules.FuncaoRules.PopulateDefaultValuesForCreation(TopDown.TopAccess.Entities.FuncaoEntity)">
            <summary>
            Popula a função com valores padrão pré-estabelecidos por regra de negócio.
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:TopDown.TopAccess.BusinessRules.FuncaoRules.GetLastSibling(TopDown.TopAccess.Entities.FuncaoEntity)">
            <summary>
            Obtém o último (conforme NumOrdem) nó-filho do mesmo nó-pai.
            </summary>
            <param name="entity">Função</param>
            <returns></returns>
        </member>
        <member name="M:TopDown.TopAccess.BusinessRules.FuncaoRules.BlockOrUnblockFunction(System.Decimal)">
            <summary>
            Bloqueia ou desbloqueia uma função
            </summary>
            <param name="idFuncao">~id da função a ser alterada</param>
            <returns>retorna true em caso de sucesso e alse em caso de erro.</returns>
        </member>
        <member name="M:TopDown.TopAccess.BusinessRules.FuncaoRules.UpdateChildren(TopDown.TopAccess.Entities.FuncaoEntity,System.Action{TopDown.TopAccess.Entities.FuncaoEntity,TopDown.TopAccess.Entities.FuncaoEntity})">
            <summary>
            Propaga alterações feitas na entidade pai para entidades filhas.
            </summary>
        </member>
        <member name="M:TopDown.TopAccess.BusinessRules.FuncaoRules.Update(TopDown.TopAccess.Entities.FuncaoEntity)">
            <summary>
            Salva alterações a entidade
            </summary>
            <param name="entity">Entidade a ser alterada</param>
        </member>
        <member name="M:TopDown.TopAccess.BusinessRules.FuncaoRules.Delete(TopDown.TopAccess.Entities.FuncaoEntity,System.Boolean)">
            <summary>
            Deleta a entidade passada pelo parâmetro.
            </summary>
        </member>
        <member name="T:TopDown.TopAccess.BusinessRules.Authorization">
            <summary>
            Classe responsável pela autorização de ações do usuário.
            </summary>
        </member>
        <member name="M:TopDown.TopAccess.BusinessRules.Authorization.Authorize(System.String,System.String,System.String)">
            <summary>
            Verifica se o usuário possui autorização para acessar a função desejada.
            </summary>
            <param name="codUsuario">Código do usuário.</param>
            <param name="controllerName">Nome do controller a ser autorizado.</param>
            <param name="actionName">Nome da action em lower case.</param>
            <returns>Retorna true se o usuário tem permissão de acessar a action do controller.</returns>
        </member>
        <member name="M:TopDown.TopAccess.BusinessRules.Authorization.GetMenuConditionExpression(System.String)">
            <summary>
            Obtém a expressão que valida se um menu deve ser exibido.
            </summary>
            <param name="codUsuario">Código do usuário.</param>
            <returns>Retorna uma expressão de filtro para exibir somente os menus válidos e autorizados para o usuário.</returns>
        </member>
        <member name="M:TopDown.TopAccess.BusinessRules.Authorization.GetMenuTree(System.String,System.Object)">
            <summary>
            Obtém a lista de autorizações do usuário.
            </summary>
            <param name="userName">Código do usuário.</param>
            <param name="moduleId">Identificador do módulo agrupador.</param>
            <returns>Retorna o menu do usuário relativo ao módulo informado.</returns>
        </member>
        <member name="M:TopDown.TopAccess.BusinessRules.Authorization.ReGroup(System.Collections.Generic.IEnumerable{TopDown.TopAccess.Entities.FuncaoEntity},TopDown.TopAccess.Entities.FuncaoEntity)">
            <summary>
            Reagrupa as funções filhas autorizadas de uma função pai.
            </summary>
            <param name="funcoesAutorizadas">Lista de todas as funções autorizadas.</param>
            <param name="funcaoPai">Função pai tendo as funções filhas sendo agrupadas.</param>
        </member>
        <member name="M:TopDown.TopAccess.BusinessRules.Authorization.GetFunctionTitle(System.String,System.String)">
            <summary>
            Obtém o nome da função referente à página.
            </summary>
            <param name="controllerName">Nome do controller da página</param>
            <param name="actionName">Nome da action da página</param>
        </member>
        <member name="M:TopDown.TopAccess.BusinessRules.Authorization.GetModules(System.String)">
            <summary>
            Quando implementado, obtém a lista de módulos disponíveis para o usuário.
            </summary>
            <param name="userName">Nome do usuário</param>
        </member>
        <member name="T:TopDown.TopAccess.BusinessRules.Authentication">
            <summary>
            Classe responsável pelo processo de autenticação e troca de senha.
            </summary>
        </member>
        <member name="F:TopDown.TopAccess.BusinessRules.Authentication.hashLength">
            <summary>
            Tamanho do hash quando o HashAlgorithm for SHA1
            </summary>
        </member>
        <member name="M:TopDown.TopAccess.BusinessRules.Authentication.LogOn(System.String,System.String)">
            <summary>
            Efetua o procedimento de LogOn no sistema.
            </summary>
            <param name="username">Nome do usuário</param>
            <param name="password">Hash SHA1 da senha</param>
            <returns>Retorna true se o procedimento for bem sucedido.</returns>
        </member>
        <member name="M:TopDown.TopAccess.BusinessRules.Authentication.ChangePassword(System.String,System.String,System.String)">
            <summary>
            Troca a senha do usuário
            </summary>
            <param name="username">Nome do usuário</param>
            <param name="oldPassword">Hash SHA1 da senha antiga</param>
            <param name="newPassword">Hash SHA1 da nova senha</param>
            <returns>Retorna true se a operação foi bem-sucedida.</returns>
        </member>
        <member name="M:TopDown.TopAccess.BusinessRules.Authentication.SendNewPassword(System.String)">
            <summary>
            Envia uma nova senha para o usuário.
            </summary>
            <param name="username">Nome do usuário</param>
        </member>
        <member name="M:TopDown.TopAccess.BusinessRules.Authentication.ValidateUserLock(TopDown.TopAccess.Entities.UsuarioEntity,TopDown.TopAccess.Entities.ParametroSegurancaEntity)">
            <summary>
            Valida se o usuário deve continuar bloqueado.
            </summary>
            <param name="user">Usuário sendo validado</param>
            <param name="parameters">Parâmetros de segurança</param>
            <returns>Retorna true se o bloqueio continua válido e deve permanecer.</returns>
        </member>
        <member name="M:TopDown.TopAccess.BusinessRules.Authentication.IncrementUnsuccessfulTries(TopDown.TopAccess.Entities.UsuarioEntity)">
            <summary>
            Incrementa a quantidade de tentativas sem sucesso.
            </summary>
            <param name="user">Usuário sendo validado</param>
        </member>
        <member name="M:TopDown.TopAccess.BusinessRules.Authentication.ResetUnsuccessfulTries(TopDown.TopAccess.Entities.UsuarioEntity)">
            <summary>
            Zera a quantidade de tentativas de logon sem sucesso.
            </summary>
            <param name="user">Usuário sendo alterado.</param>
        </member>
        <member name="M:TopDown.TopAccess.BusinessRules.Authentication.ValidatePasswordLifetime(TopDown.TopAccess.Entities.UsuarioEntity,TopDown.TopAccess.Entities.ParametroSegurancaEntity)">
            <summary>
            Valida se o tempo de vida da senha chegou ao limite.
            </summary>
            <param name="user">Usuário sendo validado</param>
            <param name="parameters">Parâmetros do sistema utilizados na validação</param>
        </member>
        <member name="T:TopDown.TopAccess.BusinessRules.TopAccessRulesInstaller">
            <summary>
            Instalador das regras especializadas do TopAccess.
            </summary>
        </member>
        <member name="M:TopDown.TopAccess.BusinessRules.TopAccessRulesInstaller.Install(Castle.Windsor.IWindsorContainer,Castle.MicroKernel.SubSystems.Configuration.IConfigurationStore)">
            <summary>
            Instala das classes especializadas de regras de negócio do TopAccess.
            </summary>
            <param name="container">DI Container de objetos.</param>
            <param name="store">Configuração do DI Container.</param>
        </member>
        <member name="T:TopDown.TopAccess.BusinessRules.ParametroSegurancaRules">
            <summary>
            Classe contendo as regras de negócio que regem os parâmetros de segurança do sistema.
            </summary>
        </member>
        <member name="M:TopDown.TopAccess.BusinessRules.ParametroSegurancaRules.#ctor">
            <summary>
            Construtor padrão.
            </summary>
        </member>
        <member name="M:TopDown.TopAccess.BusinessRules.ParametroSegurancaRules.#ctor(System.Boolean)">
            <summary>
            Construtor onde se especifica se o objeto vai utilizar uma nova sessão.
            </summary>
            <param name="useNewContext">Indica se deseja uma nova sessão.</param>
        </member>
        <member name="M:TopDown.TopAccess.BusinessRules.ParametroSegurancaRules.GetCurrent">
            <summary>
            Obtém os parâmetros de segurança correntes.
            </summary>
            <remarks>
            Espera-se que só exista um registro no repositório.
            </remarks>
        </member>
        <member name="M:TopDown.TopAccess.BusinessRules.ParametroSegurancaRules.Create(TopDown.TopAccess.Entities.ParametroSegurancaEntity)">
            <summary>
            Ao tentar criar novos parâmetros, gera um erro.
            </summary>
        </member>
        <member name="M:TopDown.TopAccess.BusinessRules.ParametroSegurancaRules.DeleteById(System.Decimal)">
            <summary>
            Ao tentar excluir parâmetros, gera um erro.
            </summary>
        </member>
        <member name="M:TopDown.TopAccess.BusinessRules.ParametroSegurancaRules.Delete(TopDown.TopAccess.Entities.ParametroSegurancaEntity)">
            <summary>
            Ao tentar excluir parâmetros, gera um erro.
            </summary>
        </member>
        <member name="T:TopDown.TopAccess.BusinessRules.Messages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:TopDown.TopAccess.BusinessRules.Messages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:TopDown.TopAccess.BusinessRules.Messages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:TopDown.TopAccess.BusinessRules.Messages.UserNotFound">
            <summary>
              Looks up a localized string similar to Usuário não encontrado!.
            </summary>
        </member>
        <member name="T:TopDown.TopAccess.BusinessRules.UsuarioRules">
            <summary>
            Classe contendo as regras de negócio que regem um usuário do sistema.
            </summary>
        </member>
        <member name="M:TopDown.TopAccess.BusinessRules.UsuarioRules.#ctor">
            <summary>
            Construtor padrão.
            </summary>
        </member>
        <member name="M:TopDown.TopAccess.BusinessRules.UsuarioRules.#ctor(System.Boolean)">
            <summary>
            Construtor onde se especifica se o objeto vai utilizar uma nova sessão.
            </summary>
            <param name="useNewContext">Indica se deseja uma nova sessão.</param>
        </member>
        <member name="M:TopDown.TopAccess.BusinessRules.UsuarioRules.Validate(TopDown.TopAccess.Entities.UsuarioEntity)">
            <summary>
            Valida se a entidade usuário informada é válida
            </summary>
            <param name="entity">Entidade usuário</param>
            <returns>Verdadeiro se é válida</returns>
        </member>
        <member name="M:TopDown.TopAccess.BusinessRules.UsuarioRules.CriarNovoUsuario(TopDown.TopAccess.Entities.UsuarioEntity)">
            <summary>
            Cria um novo usuário, com a senha padrão.
            </summary>
        </member>
        <member name="M:TopDown.TopAccess.BusinessRules.UsuarioRules.EnviarSenhaUsuarioPorEmail(TopDown.TopAccess.Entities.UsuarioEntity,System.String)">
            <summary>
            Envia a senha do usuário para o respectivo e-mail
            </summary>
            <param name="entity">Entidade usuário</param>
            <param name="txtSenha">Senha</param>
            <returns>Verdadeiro se enviou o e-mail</returns>
        </member>
        <member name="M:TopDown.TopAccess.BusinessRules.UsuarioRules.CriarNovaSenha(TopDown.TopAccess.Entities.UsuarioEntity)">
            <summary>
            Cria uma nova senha para um usuário.
            </summary>
            <param name="usuario">Usuário que receberá a nova senha.</param>
        </member>
        <member name="M:TopDown.TopAccess.BusinessRules.UsuarioRules.GerarSenhaAleatoria">
            <summary>
            Gera uma senha aleatória com pelo menos uma letra minúscula, uma maiúscula e um número
            </summary>
            <returns>A senha gerada</returns>
        </member>
        <member name="M:TopDown.TopAccess.BusinessRules.UsuarioRules.ObterSugestoesParaCodUsuario(System.String)">
            <summary>
            Sugere uma lista de opções para nome de usuário.
            </summary>
            <param name="nome">Nome completo da pessoa que terá acesso ao sistema.</param>
        </member>
        <member name="M:TopDown.TopAccess.BusinessRules.UsuarioRules.VerificarExistenciaCodUsuario(System.String)">
            <summary>
            Verifica se um CodUsuario já existe.
            </summary>
            <param name="codUsuario">Código a ser testado.</param>
            <returns>Retorna true caso encontre algum usuário com o mesmo CodUsuario. Caso contrário, retorna false.</returns>
        </member>
        <member name="M:TopDown.TopAccess.BusinessRules.UsuarioRules.BlockOrUnblockUser(System.String)">
            <summary>
            Bloqueia/Desbloqueia um usuário
            </summary>
            <param name="CodUsuario">Código do usuário a ser bloqueado/desbloquado</param>
        </member>
        <member name="M:TopDown.TopAccess.BusinessRules.UsuarioRules.RestartUserPassword(System.String)">
            <summary>
            Reinicia a senha de um usuário para abcd
            </summary>
            <param name="CodUsuario">Código do usuário cuja a senha será reiniciada.</param>
        </member>
        <member name="M:TopDown.TopAccess.BusinessRules.UsuarioRules.AssociateProfilesToUser(System.String,System.Collections.Generic.IList{TopDown.TopAccess.Entities.PerfilEntity})">
            <summary>
            Associa perfis de usuários a usuario.
            </summary>
            <param name="codUsuario">codigo do usuario a ser relacionado aos perfis</param>
            <param name="perfis">lista de perfis a serem relacionados com um usuario</param>
            <returns>retorna true em caso de sucesso e false em caso de erro.</returns>
        </member>
        <member name="T:TopDown.TopAccess.BusinessRules.ModuloRules">
            <summary>
            Regras de Negócios para Módulos
            </summary>
        </member>
        <member name="M:TopDown.TopAccess.BusinessRules.ModuloRules.PopulateDefaultValuesForCreation(TopDown.TopAccess.Entities.ModuloEntity)">
            <summary>
            Popula o módulo com valores padrão pré-estabelecidos por regra de negócio.
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:TopDown.TopAccess.BusinessRules.ModuloRules.GetLastSibling(TopDown.TopAccess.Entities.ModuloEntity)">
            <summary>
            Obtém o último (conforme NumOrdem) nó-filho do mesmo nó-pai.
            </summary>
            <param name="entity">Função</param>
            <returns></returns>
        </member>
        <member name="M:TopDown.TopAccess.BusinessRules.ModuloRules.Subir(System.Int32)">
            <summary>
            Sobe a posição de um item de menu, caso este já não seja o primeiro item.
            </summary>
            <param name="idModulo">Código do módulo desejado.</param>
        </member>
        <member name="M:TopDown.TopAccess.BusinessRules.ModuloRules.Descer(System.Int32)">
            <summary>
            Desce a posição de um item de menu, caso este já não seja o último item.
            </summary>
            <param name="idModulo">Código do módulo desejado.</param>
        </member>
        <member name="M:TopDown.TopAccess.BusinessRules.ModuloRules.DeleteById(System.Decimal)">
            <summary>
            Apaga um módulo e reordena o restante dos módulos irmãos.
            </summary>
            <param name="id">Módulo sendo excluído.</param>
        </member>
        <member name="M:TopDown.TopAccess.BusinessRules.ModuloRules.Create(TopDown.TopAccess.Entities.ModuloEntity)">
            <summary>
            Inclui um novo móduloo no repositório de dados.
            </summary>
            <param name="entity">Novo módulo que será incluído.</param>
        </member>
    </members>
</doc>
