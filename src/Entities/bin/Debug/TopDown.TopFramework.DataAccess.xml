<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TopDown.TopFramework.DataAccess</name>
    </assembly>
    <members>
        <member name="T:TopDown.TopFramework.DataAccess.DaoManager">
            <summary>
            Classe responsável pelas sessões de dados utilizadas.
            </summary>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.DaoManager.Start">
            <summary>
            Inicia os procedimentos necessários para o acesso aos dados.
            </summary>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.DaoManager.Start(NHibernate.ISession)">
            <summary>
            Inicia os procedimentos necessários para o acesso aos dados.
            </summary>
            <param name="session">Sessão de dados do NHibernate.</param>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.DaoManager.Finish">
            <summary>
            Finaliza os procedimentos necessários para o acesso aos dados. 
            </summary>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.DaoManager.Finish(NHibernate.ISession)">
            <summary>
            Finaliza os procedimentos necessários para o acesso aos dados. 
            </summary>
            <param name="session">Sessão de dados do NHibernate.</param>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.DaoManager.CreateByEntity``1">
            <summary>
            Obtém uma classe de acesso a dados que manipule a entidade solicitada.
            </summary>
            <typeparam name="T">Entidade que será manipulada.</typeparam>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.DaoManager.CreateByEntity``1(System.Boolean)">
            <summary>
            Obtém uma classe de acesso a dados que manipule a entidade solicitada.
            </summary>
            <typeparam name="T">Entidade que será manipulada.</typeparam>
            <param name="useNewSession">Indica se deseja um novo contexto de acesso aos dados.</param>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.DaoManager.CreateByEntity``2">
            <summary>
            Obtém uma classe de acesso a dados que manipule a entidade solicitada.
            </summary>
            <typeparam name="T">Entidade que será manipulada.</typeparam>
            <typeparam name="K">Tipo do identificador da entidade.</typeparam>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.DaoManager.CreateByEntity``2(System.Boolean)">
            <summary>
            Obtém uma classe de acesso a dados que manipule a entidade solicitada.
            </summary>
            <typeparam name="T">Entidade que será manipulada.</typeparam>
            <typeparam name="K">Tipo do identificador da entidade.</typeparam>
            <param name="useNewSession">Indica se deseja um novo contexto de acesso aos dados.</param>
        </member>
        <member name="P:TopDown.TopFramework.DataAccess.DaoManager.SessionFactory">
            <summary>
            Fábrica de sessões utilizada pelo NHibernate
            </summary>
        </member>
        <member name="T:TopDown.TopFramework.DataAccess.BaseDaoInstaller">
            <summary>
            Instalador dos objetos básicos Dao.
            </summary>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.BaseDaoInstaller.Install(Castle.Windsor.IWindsorContainer,Castle.MicroKernel.SubSystems.Configuration.IConfigurationStore)">
            <summary>
            Instala os objetos Dao básicos no Container.
            </summary>
        </member>
        <member name="T:TopDown.TopFramework.DataAccess.IDao">
            <summary>
            Interface base para classes de acesso a dados.
            </summary>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.IDao.Flush">
            <summary>
            Persiste as modificações da sessão no repositório de dados.
            </summary>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.IDao.Clear">
            <summary>
            Limpa as modificações da sessão no repositório de dados.
            </summary>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.IDao.Close">
            <summary>
            Fecha a sessão.
            </summary>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.IDao.BeginTransaction">
            <summary>
            Inicia uma transação na sessão corrente.
            </summary>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.IDao.Commit">
            <summary>
            Confirma a transação da sessão corrente.
            </summary>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.IDao.Rollback">
            <summary>
            Cancela a transação da sessão corrente.
            </summary>
        </member>
        <member name="T:TopDown.TopFramework.DataAccess.IDao`1">
            <summary>
            Interface base para classes de acesso a dados, fortemente tipada para entidades de negócio.
            </summary>
            <typeparam name="T">Tipo da entidade.</typeparam>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.IDao`1.Merge(`0)">
            <summary>
            Copia as propriedades de uma instância transiente para uma entidade eventualmente carregada com o mesmo identificador.
            </summary>
            <remarks>
            Se a entidade ainda não estiver carregada, esta será carregada antes da atualização;
            </remarks>
            <param name="entity">Entidade que será atualizada.</param>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.IDao`1.Persist(`0)">
            <summary>
            Persiste a entidade na sessão.
            </summary>
            <param name="entity">Entidade que será atualizada ou criada</param>
            <remarks>
            Similar ao Create ou CreateOrUpdate, adiciona uma possivelmente nova entidade à sessão, 
            mas não gera um INSERT ou um UPDATE imediatamente e portanto a entidade não recebe um identificador gerado pela base de dados, 
            este apenas será obtido no flush;
            </remarks>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.IDao`1.Replicate(`0)">
            <summary>
            Copia uma instância de uma sessão para outra sobrescrevendo a instância existente
            </summary>
            <param name="entity">Entidade que será atualizada ou criada</param>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.IDao`1.Linq">
            <summary>
            Provê as funcionalidades do Linq.
            </summary>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.IDao`1.Count">
            <summary>
            Conta quantas entidades existem no repositório de dados.
            </summary>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.IDao`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Conta quantas entidades existem no repositório de dados que satisfazem o critério de filtro.
            </summary>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.IDao`1.GetAll">
            <summary>
            Obtém uma lista de entidades, ordenadas conforme a ordenação padrão.
            </summary>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.IDao`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
            Obtém uma lista de todas as entidades do repositório de dados, ordenadas conforme a expressão Lambda.
            </summary>
            <param name="orderBy">Expressão Lambda retornando os campos da ordenação.</param>
            <param name="descending">Indica se a ordenação será decrescente.</param>
            <example>
            <para>
            Ordenando pela propriedade "CategoryName"
            <code>dao.GetAll(p => p.CategoryName);</code>
            </para>
            <para>
            Ordenando pelas propriedades "Name" e "LastName"
            <code>dao.GetAll(u => new { u.Name, u.LastName });</code>
            </para>
            </example>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.IDao`1.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Busca todas as entidades que satisfaçam a expressão Lambda.
            </summary>
            <param name="where">Expressão Lambda retornando a condição de filtro.</param>
            <example>
            Filtrando pela propriedade "Idade", onde seu valor é maior ou igual a 18.
            <code>dao.FindAll(c => c.Idade >= 18);</code>
            </example>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.IDao`1.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Busca todas as entidades que satisfaçam a expressão Lambda de filtro, 
            ordenando conforme a expressão Lambda de ordenação.
            </summary>
            <param name="where">Expressão Lambda retornando a condição de filtro.</param>
            <param name="orderBy">Expressão Lambda retornando os campos da ordenação.</param>
            <param name="descending">Indica se a ordenação será decrescente.</param>
            <param name="pageIndex">Índice da página solicitada, começando em 1.</param>
            <param name="pageSize">Tamanho da página de dados.</param>
            <example>
            Filtrando pela propriedade "DataNascimento", onde o mês é igual ao corrente 
            e ordenando pela propriedade "Nome", trazendo somente a primeira página com 5 registros.
            <code>dao.FindAll(c => c.DataNascimento.Month == DateTime.Now.Month, c => c.Nome 1, 5);</code>
            </example>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.IDao`1.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Boolean)">
            <summary>
            Busca todas as entidades que satisfaçam a expressão Lambda de filtro, 
            ordenando conforme a expressão Lambda de ordenação.
            </summary>
            <param name="where">Expressão Lambda retornando a condição de filtro.</param>
            <param name="orderBy">Expressão Lambda retornando os campos da ordenação.</param>
            <param name="descending">Indica se a ordenação será decrescente.</param>
            <example>
            Filtrando pela propriedade "DataNascimento", onde o mês é igual ao corrente 
            e ordenando pela propriedade "Nome".
            <code>dao.FindAll(c => c.DataNascimento.Month == DateTime.Now.Month, c => c.Nome);</code>
            </example>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.IDao`1.FindAll``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
            Busca todas as entidades que satisfaçam a expressão Lambda de filtro, 
            ordenando conforme a expressão Lambda de ordenação.
            </summary>
            <param name="where">Expressão Lambda retornando a condição de filtro.</param>
            <param name="orderBy">Expressão Lambda retornando os campos da ordenação.</param>
            <param name="descending">Indica se a ordenação será decrescente.</param>
            <example>
            Filtrando pela propriedade "DataNascimento", onde o mês é igual ao corrente 
            e ordenando pela propriedade "Nome".
            <code>dao.FindAll(c => c.DataNascimento.Month == DateTime.Now.Month, c => c.Nome);</code>
            </example>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.IDao`1.FindAll``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean,System.Int32,System.Int32)">
            <summary>
            Busca todas as entidades que satisfaçam a expressão Lambda de filtro, 
            ordenando conforme a expressão Lambda de ordenação.
            </summary>
            <param name="where">Expressão Lambda retornando a condição de filtro.</param>
            <param name="orderBy">Expressão Lambda retornando os campos da ordenação.</param>
            <param name="descending">Indica se a ordenação será decrescente.</param>
            <param name="pageIndex">Índice da página solicitada, começando em 1.</param>
            <param name="pageSize">Tamanho da página de dados.</param>
            <example>
            Filtrando pela propriedade "DataNascimento", onde o mês é igual ao corrente 
            e ordenando pela propriedade "Nome", trazendo somente a primeira página com 5 registros.
            <code>dao.FindAll(c => c.DataNascimento.Month == DateTime.Now.Month, c => c.Nome 1, 5);</code>
            </example>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.IDao`1.Create(`0)">
            <summary>
            Inclui uma nova entidade no repositório de dados.
            </summary>
            <param name="entity">Nova entidade que será incluída.</param>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.IDao`1.Update(`0)">
            <summary>
            Atualiza os dados de uma entidade já existente no repositório de dados.
            </summary>
            <param name="entity">Entidade que será atualizada.</param>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.IDao`1.Delete(`0)">
            <summary>
            Exclui uma entidade do repositório de dados.
            </summary>
            <param name="entity">Entidade que será excluída.</param>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.IDao`1.Delete(`0,System.Boolean)">
            <summary>
            Exclui uma entidade do repositório de dados.
            </summary>
            <param name="entity">Entidade que será excluída.</param>
            <param name="flush">Especifica se deseja fazer flush.</param>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.IDao`1.Refresh(`0)">
            <summary>
            Atualiza o estado da entidade com o banco de dados
            </summary>
            <param name="entity">Entidade que terá o estado atualizado.</param>
        </member>
        <member name="T:TopDown.TopFramework.DataAccess.IDao`2">
            <summary>
            Interface base para classes de acesso a dados, fortemente tipada para entidades de negócio, 
            onde se conhece o tipo do identificador.
            </summary>
            <typeparam name="T">Tipo da entidade.</typeparam>
            <typeparam name="K">Tipo do identificador da entidade</typeparam>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.IDao`2.GetById(`1)">
            <summary>
            Obtém uma entidade do repositório de dados mediante um identificador.
            </summary>
            <param name="id">Identificador da entidade desejada.</param>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.IDao`2.Load(`1)">
            <summary>
            Carrega minimamente uma entidade para a sessão de dados mediante um identificador.
            </summary>
            <remarks>
            Utilizado para construir relacionamentos ou fazer filtros baseando-se em relacionamentos.
            </remarks>
            <param name="id">Identificador da entidade desejada.</param>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.IDao`2.DeleteById(`1)">
            <summary>
            Exclui uma entidade do repositório de dados mediante um identificador.
            </summary>
            <param name="id">Identificador da entidade que será excluída.</param>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.IDao`2.DeleteById(`1,System.Boolean)">
            <summary>
            Exclui uma entidade do repositório de dados mediante um identificador.
            </summary>
            <param name="id">Identificador da entidade que será excluída.</param>
            <param name="flush">Especifica se deseja fazer flush.</param>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.IDao`2.ValidateUnique``1(`0,System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Verifica a unicidade de uma expressão conforme valores fornecidos pela entidade.
            </summary>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.IDao`2.ValidateUnique``1(System.Linq.IQueryable{`0},`0,System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Verifica a unicidade de uma expressão conforme valores fornecidos pela entidade, dentro de uma consulta IQueryable.
            </summary>
        </member>
        <member name="T:TopDown.TopFramework.DataAccess.BaseDao">
            <summary>
            Classe base para acesso a dados.
            </summary>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.BaseDao.#ctor">
            <summary>
            Construtor padrão.
            </summary>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.BaseDao.#ctor(System.Boolean)">
            <summary>
            Construtor com a opção de utilizar uma nova sessão de dados.
            </summary>
            <param name="useNewSession">Indica se deseja utilizar uma nova sessão ou a sessão atualmente em memória.</param>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.BaseDao.#ctor(NHibernate.ISession)">
            <summary>
            Construtor reservado que permite informar a sessão NHibernate que se deseja utilizar.
            </summary>
            <param name="session">Sessão de dados do NHibernate.</param>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.BaseDao.Flush">
            <summary>
            Persiste as modificações da sessão.
            </summary>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.BaseDao.Clear">
            <summary>
            Limpa as modificações da sessão.
            </summary>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.BaseDao.Close">
            <summary>
            Fecha a sessão.
            </summary>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.BaseDao.BeginTransaction">
            <summary>
            Inicia uma transação na sessão corrente.
            </summary>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.BaseDao.Commit">
            <summary>
            Confirma a transação da sessão corrente.
            </summary>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.BaseDao.Rollback">
            <summary>
            Cancela a transação da sessão corrente.
            </summary>
        </member>
        <member name="P:TopDown.TopFramework.DataAccess.BaseDao.Session">
            <summary>
            Sessão utilizada pela instância.
            </summary>
        </member>
        <member name="T:TopDown.TopFramework.DataAccess.BaseDao`1">
            <summary>
            Classe base para acesso a dados, fortemente tipada para entidades de negócio.
            </summary>
            <typeparam name="T">Tipo da entidade.</typeparam>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.BaseDao`1.#ctor">
            <summary>
            Construtor padrão.
            </summary>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.BaseDao`1.#ctor(System.Boolean)">
            <summary>
            Construtor com a opção de utilizar uma nova sessão de dados.
            </summary>
            <param name="useNewSession">Indica se deseja utilizar uma nova sessão.</param>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.BaseDao`1.#ctor(NHibernate.ISession)">
            <summary>
            Construtor reservado que permite informar a sessão NHibernate que se deseja utilizar.
            </summary>
            <param name="session">Sessão de dados do NHibernate.</param>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.BaseDao`1.Merge(`0)">
            <summary>
            Copia as propriedades de uma instância transiente para uma entidade eventualmente carregada com o mesmo identificador.
            </summary>
            <remarks>
            Se a entidade ainda não estiver carregada, esta será carregada antes da atualização;
            </remarks>
            <param name="entity">Entidade que será atualizada.</param>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.BaseDao`1.Merge(`0,NHibernate.ISession)">
            <summary>
            Copia as propriedades de uma instância transiente para uma entidade eventualmente carregada com o mesmo identificador.
            </summary>
            <remarks>
            Se a entidade ainda não estiver carregada, esta será carregada antes da atualização;
            </remarks>
            <param name="entity">Entidade que será atualizada.</param>
            <param name="session">Sessão de dados do NHibernate.</param>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.BaseDao`1.Persist(`0)">
            <summary>
            Persiste a entidade na sessão.
            </summary>
            <param name="entity">Entidade que será atualizada ou criada</param>
            <remarks>
            Similar ao Create ou CreateOrUpdate, adiciona uma possivelmente nova entidade à sessão, 
            mas não gera um INSERT ou um UPDATE imediatamente e portanto a entidade não recebe um identificador gerado pela base de dados, 
            este apenas será obtido no flush;
            </remarks>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.BaseDao`1.Persist(`0,NHibernate.ISession)">
            <summary>
            Persiste a entidade na sessão.
            </summary>
            <param name="entity">Entidade que será atualizada ou criada</param>
            <param name="session">Sessão de dados do NHibernate.</param>
            <remarks>
            Similar ao Create ou CreateOrUpdate, adiciona uma possivelmente nova entidade à sessão, 
            mas não gera um INSERT ou um UPDATE imediatamente e portanto a entidade não recebe um identificador gerado pela base de dados, 
            este apenas será obtido no flush;
            </remarks>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.BaseDao`1.Replicate(`0)">
            <summary>
            Copia uma instância de uma sessão para outra sobrescrevendo a instância existente
            </summary>
            <param name="entity">Entidade que será atualizada ou criada</param>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.BaseDao`1.Replicate(`0,NHibernate.ISession)">
            <summary>
            Copia uma instância de uma sessão para outra sobrescrevendo a instância existente.
            </summary>
            <param name="entity">Entidade que será atualizada ou criada</param>
            <param name="session">Sessão de dados do NHibernate.</param>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.BaseDao`1.Linq">
            <summary>
            Provê as funcionalidades do Linq.
            </summary>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.BaseDao`1.Linq(NHibernate.ISession)">
            <summary>
            Provê as funcionalidades do Linq para uma determinada sessão de dados.
            </summary>
            <param name="session">Sessão de dados do NHibernate.</param>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.BaseDao`1.Count">
            <summary>
            Conta quantas entidades existem no repositório de dados.
            </summary>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.BaseDao`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Conta quantas entidades existem no repositório de dados que satisfazem o critério de filtro.
            </summary>
            <param name="where">Expressão Lambda retornando a condição de filtro.</param>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.BaseDao`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},NHibernate.ISession)">
            <summary>
            Conta quantas entidades existem no repositório de dados que satisfazem o critério de filtro.
            </summary>
            <param name="where">Expressão Lambda retornando a condição de filtro.</param>
            <param name="session">Sessão de dados do NHibernate.</param>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.BaseDao`1.GetAll">
            <summary>
            Obtém uma lista de entidades, ordenadas conforme a ordenação padrão.
            </summary>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.BaseDao`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
            Obtém uma lista de todas as entidades do repositório de dados, ordenadas conforme a expressão Lambda.
            </summary>
            <param name="orderBy">Expressão Lambda retornando os campos da ordenação.</param>
            <param name="descending">Indica se a ordenação será decrescente.</param>
            <example>
            <para>
            Ordenando pela propriedade "CategoryName" de forma ascendente.
            <code>dao.GetAll(p => p.CategoryName, false);</code>
            </para>
            <para>
            Ordenando pelas propriedades "Name" e "LastName", de forma descendente
            <code>dao.GetAll(u => new { u.Name, u.LastName }, true);</code>
            </para>
            </example>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.BaseDao`1.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Busca todas as entidades que satisfaçam a expressão Lambda.
            </summary>
            <param name="where">Expressão Lambda retornando a condição de filtro.</param>
            <example>
            Filtrando pela propriedade "Idade", onde seu valor é maior ou igual a 18.
            <code>dao.FindAll(c => c.Idade >= 18);</code>
            </example>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.BaseDao`1.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Busca todas as entidades que satisfaçam a expressão Lambda de filtro, 
            ordenando conforme a expressão Lambda de ordenação.
            </summary>
            <param name="where">Expressão Lambda retornando a condição de filtro.</param>
            <param name="orderBy">Expressão Lambda retornando os campos da ordenação.</param>
            <param name="descending">Indica se a ordenação será decrescente.</param>
            <param name="pageIndex">Índice da página solicitada, começando em 1.</param>
            <param name="pageSize">Tamanho da página de dados.</param>
            <example>
            Filtrando pela propriedade "DataNascimento", onde o mês é igual ao corrente 
            e ordenando pela propriedade "Nome", trazendo somente a primeira página com 5 registros.
            <code>dao.FindAll(c => c.DataNascimento.Month == DateTime.Now.Month, c => c.Nome, 1, 5);</code>
            </example>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.BaseDao`1.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Boolean)">
            <summary>
            Busca todas as entidades que satisfaçam a expressão Lambda de filtro, 
            ordenando conforme a expressão Lambda de ordenação.
            </summary>
            <param name="where">Expressão Lambda retornando a condição de filtro.</param>
            <param name="orderBy">Expressão Lambda retornando os campos da ordenação.</param>
            <param name="descending">Indica se a ordenação deve ser do maior valor para o menor.</param>
            <example>
            Filtrando pela propriedade "DataNascimento", onde o mês é igual ao corrente 
            e ordenando pela propriedade "Nome".
            <code>dao.FindAll(c => c.DataNascimento.Month == DateTime.Now.Month, c => c.Nome);</code>
            </example>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.BaseDao`1.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Boolean,NHibernate.ISession)">
            <summary>
            Busca todas as entidades que satisfaçam a expressão Lambda de filtro, 
            ordenando conforme a expressão Lambda de ordenação.
            </summary>
            <param name="where">Expressão Lambda retornando a condição de filtro.</param>
            <param name="orderBy">Expressão Lambda retornando os campos da ordenação.</param>
            <param name="descending">Indica se a ordenação será decrescente.</param>
            <param name="session">Sessão de dados do NHibernate.</param>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.BaseDao`1.FindAll``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
            Busca todas as entidades que satisfaçam a expressão Lambda de filtro, 
            ordenando conforme a expressão Lambda de ordenação.
            </summary>
            <param name="where">Expressão Lambda retornando a condição de filtro.</param>
            <param name="orderBy">Expressão Lambda retornando os campos da ordenação.</param>
            <param name="descending">Indica se a ordenação será decrescente.</param>
            <example>
            Filtrando pela propriedade "DataNascimento", onde o mês é igual ao corrente 
            e ordenando pela propriedade "Nome".
            <code>dao.FindAll(c => c.DataNascimento.Month == DateTime.Now.Month, c => c.Nome);</code>
            </example>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.BaseDao`1.FindAll``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean,System.Int32,System.Int32)">
            <summary>
            Busca todas as entidades que satisfaçam a expressão Lambda de filtro, 
            ordenando conforme a expressão Lambda de ordenação.
            </summary>
            <param name="where">Expressão Lambda retornando a condição de filtro.</param>
            <param name="orderBy">Expressão Lambda retornando os campos da ordenação.</param>
            <param name="descending">Indica se a ordenação será decrescente.</param>
            <param name="pageIndex">Índice da página solicitada, começando em 1.</param>
            <param name="pageSize">Tamanho da página de dados.</param>
            <example>
            Filtrando pela propriedade "DataNascimento", onde o mês é igual ao corrente 
            e ordenando pela propriedade "Nome", trazendo somente a primeira página com 5 registros.
            <code>dao.FindAll(c => c.DataNascimento.Month == DateTime.Now.Month, c => c.Nome 1, 5);</code>
            </example>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.BaseDao`1.FindAll``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean,System.Int32,System.Int32,NHibernate.ISession)">
            <summary>
            Busca todas as entidades que satisfaçam a expressão Lambda de filtro, 
            ordenando conforme a expressão Lambda de ordenação.
            </summary>
            <param name="where">Expressão Lambda retornando a condição de filtro.</param>
            <param name="orderBy">Expressão Lambda retornando os campos da ordenação.</param>
            <param name="descending">Indica se a ordenação será decrescente.</param>
            <param name="pageIndex">Índice da página solicitada, começando em 1.</param>
            <param name="pageSize">Tamanho da página de dados.</param>
            <param name="session">Sessão de dados do NHibernate.</param>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.BaseDao`1.FindAll``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean,NHibernate.ISession)">
            <summary>
            Busca todas as entidades que satisfaçam a expressão Lambda de filtro, 
            ordenando conforme a expressão Lambda de ordenação e usando uma determinada sessão de dados.
            </summary>
            <param name="where">Expressão Lambda retornando a condição de filtro.</param>
            <param name="orderBy">Expressão Lambda retornando os campos da ordenação.</param>
            <param name="descending">Indica se a ordenação será decrescente.</param>
            <param name="session">Sessão de dados do NHibernate.</param>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.BaseDao`1.Create(`0)">
            <summary>
            Inclui uma nova entidade no repositório de dados.
            </summary>
            <param name="entity">Nova entidade que será incluída.</param>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.BaseDao`1.Create(`0,NHibernate.ISession)">
            <summary>
            Inclui uma nova entidade no repositório de dados, usando uma determinada sessão de dados.
            </summary>
            <param name="entity">Nova entidade que será incluída.</param>
            <param name="session">Sessão de dados do NHibernate.</param>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.BaseDao`1.Update(`0)">
            <summary>
            Atualiza os dados de uma entidade já existente no repositório de dados.
            </summary>
            <param name="entity">Entidade que será atualizada.</param>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.BaseDao`1.Update(`0,NHibernate.ISession)">
            <summary>
            Atualiza os dados de uma entidade já existente no repositório de dados, usando uma determinada sessão de dados.
            </summary>
            <param name="entity">Entidade que será atualizada.</param>
            <param name="session">Sessão de dados do NHibernate.</param>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.BaseDao`1.Delete(`0)">
            <summary>
            Exclui uma entidade do repositório de dados.
            </summary>
            <param name="entity">Entidade que será excluída.</param>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.BaseDao`1.Delete(`0,System.Boolean)">
            <summary>
            Exclui uma entidade do repositório de dados.
            </summary>
            <param name="entity">Entidade que será excluída.</param>
            <param name="flush">Especifica se deseja fazer flush.</param>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.BaseDao`1.Delete(`0,NHibernate.ISession)">
            <summary>
            Exclui uma entidade do repositório de dados, usando uma determinada sessão de dados.
            </summary>
            <param name="entity">Entidade que será excluída.</param>
            <param name="session">Sessão de dados do NHibernate.</param>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.BaseDao`1.Delete(`0,System.Boolean,NHibernate.ISession)">
            <summary>
            Exclui uma entidade do repositório de dados, usando uma determinada sessão de dados.
            </summary>
            <param name="entity">Entidade que será excluída.</param>
            <param name="flush">Especifica se deseja fazer flush.</param>
            <param name="session">Sessão de dados do NHibernate.</param>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.BaseDao`1.Refresh(`0)">
            <summary>
            Atualiza o estado da entidade com o banco de dados
            </summary>
            <param name="entity">Entidade que terá o estado atualizado.</param>
        </member>
        <member name="T:TopDown.TopFramework.DataAccess.BaseDao`2">
            <summary>
            Classe base para acesso a dados, fortemente tipada para entidades de negócio, 
            onde se conhece o tipo do identificador.
            </summary>
            <typeparam name="T">Tipo da entidade.</typeparam>
            <typeparam name="K">Tipo do identificador da entidade</typeparam>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.BaseDao`2.#ctor">
            <summary>
            Construtor padrão.
            </summary>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.BaseDao`2.#ctor(System.Boolean)">
            <summary>
            Construtor com a opção de utilizar uma nova sessão de dados.
            </summary>
            <param name="useNewSession">Indica se deseja utilizar uma nova sessão.</param>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.BaseDao`2.#ctor(NHibernate.ISession)">
            <summary>
            Construtor reservado que permite informar a sessão NHibernate que se deseja utilizar.
            </summary>
            <param name="session">Sessão de dados do NHibernate.</param>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.BaseDao`2.GetById(`1)">
            <summary>
            Obtém uma entidade do repositório de dados mediante um identificador.
            </summary>
            <param name="id">Identificador da entidade desejada.</param>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.BaseDao`2.GetById(`1,NHibernate.ISession)">
            <summary>
            Obtém uma entidade do repositório de dados mediante um identificador, usando uma determinada sessão de dados.
            </summary>
            <param name="id">Identificador da entidade desejada.</param>
            <param name="session">Sessão de dados do NHibernate.</param>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.BaseDao`2.Load(`1)">
            <summary>
            Carrega uma entidade existente no repositório para a sessão.
            </summary>
            <param name="id">Identificador da entidade desejada.</param>
            <returns>Retorna um proxy da entidade, que eventualmente será preenchido com os valores do repositório.</returns>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.BaseDao`2.DeleteById(`1)">
            <summary>
            Exclui uma entidade do repositório de dados mediante um identificador.
            </summary>
            <param name="id">Identificador da entidade que será excluída.</param>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.BaseDao`2.DeleteById(`1,System.Boolean)">
            <summary>
            Exclui uma entidade do repositório de dados mediante um identificador.
            </summary>
            <param name="id">Identificador da entidade que será excluída.</param>
            <param name="flush">Especifica se deseja fazer flush.</param>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.BaseDao`2.DeleteById(`1,NHibernate.ISession)">
            <summary>
            Exclui uma entidade do repositório de dados mediante um identificador, usando uma determinada sessão de dados.
            </summary>
            <param name="id">Identificador da entidade que será excluída.</param>
            <param name="session">Sessão de dados do NHibernate.</param>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.BaseDao`2.DeleteById(`1,System.Boolean,NHibernate.ISession)">
            <summary>
            Exclui uma entidade do repositório de dados mediante um identificador, usando uma determinada sessão de dados.
            </summary>
            <param name="id">Identificador da entidade que será excluída.</param>
            <param name="flush">especifica se deve fazer flush imediatamente após o delete.</param>
            <param name="session">Sessão de dados do NHibernate.</param>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.BaseDao`2.ValidateUnique``1(`0,System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Verifica a unicidade de uma expressão conforme valores fornecidos pela entidade.
            </summary>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.BaseDao`2.ValidateUnique``1(System.Linq.IQueryable{`0},`0,System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Verifica a unicidade de uma expressão conforme valores fornecidos pela entidade, dentro de uma consulta IQueryable.
            </summary>
        </member>
        <member name="T:TopDown.TopFramework.DataAccess.AuditInterceptor">
            <summary>
            Interceptador para fins de auditoria.
            </summary>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.AuditInterceptor.OnSave(System.Object,System.Object,System.Object[],System.String[],NHibernate.Type.IType[])">
            <summary>
            Intercepta o evento de Save do NHibernate.
            </summary>
            <param name="entity">Entidade sendo persistida.</param>
            <param name="id">Identificador da entidade.</param>
            <param name="state">Vetor de estado da entidade, contendo os valores de cada propriedade.</param>
            <param name="propertyNames">Vetor de nomes das propriedades.</param>
            <param name="types">Vetor de tipos das propriedades.</param>
        </member>
        <member name="M:TopDown.TopFramework.DataAccess.AuditInterceptor.OnFlushDirty(System.Object,System.Object,System.Object[],System.Object[],System.String[],NHibernate.Type.IType[])">
            <summary>
            Intercepta o evento de Flush do NHibernate.
            </summary>
            <param name="entity">Entidade sendo persistida.</param>
            <param name="id">Identificador da entidade.</param>
            <param name="currentState">Vetor de estado da entidade, contendo os valores atuais de cada propriedade.</param>
            <param name="previousState">Vetor de estado anterior da entidade, contendo os valores antigos de cada propriedade</param>
            <param name="propertyNames">Vetor de nomes das propriedades.</param>
            <param name="types">Vetor de tipos das propriedades.</param>
        </member>
    </members>
</doc>
